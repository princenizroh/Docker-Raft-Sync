version: "3.8"

services:
  # Redis for state management (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - distributed-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  # Node 1
  node1:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: dist-node-1
    hostname: dist-node-1
    environment:
      - NODE_ID=node-1
      - NODE_HOST=0.0.0.0
      - NODE_PORT=5000
      - NODE_CLUSTER_PORT=5001
      - CLUSTER_NODES=node-1:dist-node-1:5000,node-2:dist-node-2:5000,node-3:dist-node-3:5000
      - REDIS_HOST=redis
      - LOG_LEVEL=DEBUG
      - ENABLE_HTTP_API=true
      - API_HOST=0.0.0.0
      - API_PORT=6000
      - FAILURE_DETECTOR_PHI_THRESHOLD=30.0
      - FAILURE_DETECTOR_WINDOW_SIZE=100
      - FAILURE_DETECTOR_MIN_SAMPLES=20
      - FAILURE_DETECTOR_SUSPECT_TIMEOUT=30000
      - RAFT_HEARTBEAT_INTERVAL=1000
      - RAFT_ELECTION_TIMEOUT_MIN=5000
      - RAFT_ELECTION_TIMEOUT_MAX=10000
    ports:
      - "6000:6000"
    volumes:
      - node1_data:/app/data
    networks:
      distributed-net:
        aliases:
          - dist-node-1
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-s",
          "-f",
          "-o",
          "/dev/null",
          "http://127.0.0.1:6000/status",
        ]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s
    restart: unless-stopped

  # Node 2
  node2:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: dist-node-2
    hostname: dist-node-2
    environment:
      - NODE_ID=node-2
      - NODE_HOST=0.0.0.0
      - NODE_PORT=5000
      - NODE_CLUSTER_PORT=5001
      - CLUSTER_NODES=node-1:dist-node-1:5000,node-2:dist-node-2:5000,node-3:dist-node-3:5000
      - REDIS_HOST=redis
      - LOG_LEVEL=DEBUG
      - ENABLE_HTTP_API=true
      - API_HOST=0.0.0.0
      - API_PORT=6010
      - FAILURE_DETECTOR_PHI_THRESHOLD=30.0
      - FAILURE_DETECTOR_WINDOW_SIZE=100
      - FAILURE_DETECTOR_MIN_SAMPLES=20
      - FAILURE_DETECTOR_SUSPECT_TIMEOUT=30000
      - RAFT_HEARTBEAT_INTERVAL=1000
      - RAFT_ELECTION_TIMEOUT_MIN=5000
      - RAFT_ELECTION_TIMEOUT_MAX=10000
    ports:
      - "6010:6010"
    volumes:
      - node2_data:/app/data
    networks:
      distributed-net:
        aliases:
          - dist-node-2
    depends_on:
      redis:
        condition: service_healthy
      node1:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-s",
          "-f",
          "-o",
          "/dev/null",
          "http://127.0.0.1:6010/status",
        ]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s
    restart: unless-stopped

  # Node 3
  node3:
    build:
      context: ..
      dockerfile: docker/Dockerfile.node
    container_name: dist-node-3
    hostname: dist-node-3
    environment:
      - NODE_ID=node-3
      - NODE_HOST=0.0.0.0
      - NODE_PORT=5000
      - NODE_CLUSTER_PORT=5001
      - CLUSTER_NODES=node-1:dist-node-1:5000,node-2:dist-node-2:5000,node-3:dist-node-3:5000
      - REDIS_HOST=redis
      - LOG_LEVEL=DEBUG
      - ENABLE_HTTP_API=true
      - API_HOST=0.0.0.0
      - API_PORT=6020
      - FAILURE_DETECTOR_PHI_THRESHOLD=30.0
      - FAILURE_DETECTOR_WINDOW_SIZE=100
      - FAILURE_DETECTOR_MIN_SAMPLES=20
      - FAILURE_DETECTOR_SUSPECT_TIMEOUT=30000
      - RAFT_HEARTBEAT_INTERVAL=1000
      - RAFT_ELECTION_TIMEOUT_MIN=5000
      - RAFT_ELECTION_TIMEOUT_MAX=10000
    ports:
      - "6020:6020"
    volumes:
      - node3_data:/app/data
    networks:
      distributed-net:
        aliases:
          - dist-node-3
    depends_on:
      redis:
        condition: service_healthy
      node2:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-s",
          "-f",
          "-o",
          "/dev/null",
          "http://127.0.0.1:6020/status",
        ]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s
    restart: unless-stopped

networks:
  distributed-net:
    driver: bridge

volumes:
  redis_data:
  node1_data:
  node2_data:
  node3_data:
